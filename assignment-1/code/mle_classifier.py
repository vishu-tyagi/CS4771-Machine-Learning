# -*- coding: utf-8 -*-
"""mle_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lCDQN2rLFHaaRXAdSA7wSbzOTeKR90WD
"""

from tqdm import tqdm

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import pprint as pp
pp = pp.PrettyPrinter(indent=4)

from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler

from utils import *

X, Y = load_data()
X = X/255.

(m, d) = X.shape
print(f'Input dimension:{d}, Total samples: {m}')

np.random.seed(99)

idx = np.random.randint(low=0, high=m)

plt.figure(figsize=(8,6))
plt.imshow(X[idx].reshape((28,28)));
print(Y[idx])

print(f'Proportion of classes in given dataset')
uniques, counts = np.unique(Y, return_counts=True)
percentages = dict(zip(uniques, counts * 100 / len(Y)))
pp.pprint(percentages)

devScores = []
testScores = []
seeds = [28, 42, 84, 128, 164, 256, 512, 999]

for seed in tqdm(seeds):
    X_dev, X_test, Y_dev, Y_test = train_test_split(X, Y, test_size=.2, shuffle=True, stratify=Y, random_state=seed)

    mle = MLEClassifier()
    mle.fit(X_dev, Y_dev)

    devScores.append(mle.score(X_dev, Y_dev))
    testScores.append(mle.score(X_test, Y_test))

print(f'\n\nAverage accuracy on dev set: {np.mean(np.array(devScores)):.3f}')
print(f'Average accuracy on test set: {np.mean(np.array(testScores)):.3f}')

df = {'Random Seed':seeds+seeds, 
      'Score':devScores+testScores, 
      'Accuracy':['Development']*8 + ['Test']*8}

df = pd.DataFrame(df)

plt.figure(figsize=(10,6))

sns.barplot(data=df, x='Random Seed', y='Score', hue='Accuracy')
plt.xlabel('Random Seed')
plt.ylabel('Average accuracy over 8 splits')
plt.title('Evaluating MLE classifier')
plt.yticks([.1*i for i in range(10)])
plt.savefig('Evaluating_MLE_Classifer');

devScores

testScores

